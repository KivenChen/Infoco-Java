{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Java 的第一印象\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *（Shift + Enter 运行被选中的格子并跳到下一格）*\n",
    "---\n",
    "\n",
    "## 为什么用 Jupiter Notebook\n",
    "\n",
    "<br>\n",
    "\n",
    "在这个地方，你可以边看教程边运行示例代码，并且随心所欲的修改代码，然后查看结果。\n",
    "\n",
    "在这个地方，Java 程序可以像 Python 一样，不必遵循一个必要的框架，每写一行就可以执行一行。\n",
    "\n",
    "修改之后结果不对？出错了？你可以狂按撤销，会到修改之前的那一步甚至更久远。（Windows：按 Ctrl+Z 撤销；macOS: Command+Z）\n",
    "\n",
    "这里更注重运行之后的结果。\n",
    "\n",
    "下面是 Jupiter Notebook 中的一个例子：\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "// 同样的，在选中了这个格子之后，按 Shift + Enter 执行，并跳到下一个格子\n",
    "\n",
    "System.out.println(\"Hello World\");  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "但正常的 Java 程序是很严谨的，每一个程序都需要把代码仔细的封装起来。每一个需要在本地执行的文件，都要有 public class 和 main 这两层。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "// 在本地，这段代码会执行，直接输出结果。不过在这里不会\n",
    "\n",
    "public class HelloWorld{\n",
    "    public static void main(String[] args){\n",
    "        System.out.println(\"Hello World\");\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 输出\n",
    "<br>\n",
    "在屏幕上打印一些文字很简单，就用刚才的那个函数。\n",
    "println 就是 print line 的意思，输出一行。\n",
    "你可以随时选中下面的格子，随意修改 “” 里面的内容，然后查看结果。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "System.out.println(\"One. \");\n",
    "System.out.println(\"Two. \");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "有一个很类似的函数叫 print，看一下它的不同？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "System.out.print(\"One. \");\n",
    "System.out.print(\"Two. \");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 表达式"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在 Java 里面，能表达一个值的，都是表达式。\n",
    "\n",
    "在 Notebook 里面，对于某一个表达式的值，我们除了用 `print` 和 `println`输出它以外，还可以直接 Shift+Enter 显示它的值。但在本地运行的时候，单个表达式不能作为整个语句。\n",
    "\n",
    "**注意**：如果是一个表达式的值，输出内容会有 out 的字样"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "最常见的表达式是数字和算式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "233"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "2333*233"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1891 % 64 // 用\"%\"可以得到整除之后剩下的余数 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "字符串"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"233\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "布尔表达式（很多都是通过比较得出的）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "3 < 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "3 > 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 变量：小数和整数\n",
    "\n",
    "变量可以储存一个值，但定义一个变量的时候，必须要指定类型\n",
    "\n",
    "比如，以下两种都是整数（int 类型就是整数英文 integer 的缩写）\n",
    "\n",
    "只不过 long 自如其名，能存很大的数（2的64次方），int 最多只有两亿多一点（2的32次方）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "int a = 89;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "long b = 1891;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a+b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "整数的运算，结果一般都是整数 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b / a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1891 / 89"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "即使，你使用了小数类型 —— double 去存储它，也不是想象中的那样"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "double c = b / a;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "如果你要得到一个**小数**结果，那么，这个算式里面，**只要有一个小数参与进来就好了。**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "double c = 89;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b / c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "或者这样"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1891.0 / 89.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "再或者这样"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(double) 1891 / 89"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "看腻了小数，想整除？\n",
    "\n",
    "那就把整个算式的结果给转成整数类型（int）\n",
    "\n",
    "*这里的整除，都会把小数直接去掉"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(int) (689.4 / 8.649)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 输入"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Java 里面的输入不像别的语言。这里的一切都被严谨的分类封装。\n",
    "\n",
    "你首先需要一个 `Scanner` 扫描器，并且要告诉它从哪里输入：是文件？屏幕？还是键盘？\n",
    "\n",
    "**这里创建的 Scanner 名字叫 %s，你可以换成这些，看一下会不会报错，然后再换回s*\n",
    "\n",
    "_s\n",
    "\n",
    "s\n",
    "\n",
    "1_s\n",
    "\n",
    "SCANNER\n",
    "\n",
    "扫描器"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Scanner %s = new Scanner(System.in);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "要想获取输入的内容？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "s.nextLine();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "看起来这个函数输出了一个值，我们可以把它储存在一个**字符串变量**里面\n",
    "\n",
    "尝试这个：\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "String str = s.nextLine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "// 你可以编辑这个格子，以查看 str 的值"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "你也可以直接输入小数或者数字，但：如果输入的不是数字，是会出错的。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "int integer = s.nextInt();\n",
    "double decimal = s.nextDouble();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "// 你可以编辑这个格子，以查看 integer 和 decimal 的值"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 休眠（或者叫等待）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "你可以先等 3000 ms 体验一下（虽然由于服务器的延迟，这必定会超时）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Thread.sleep(3000);\n",
    "System.out.println(\"Sleep completed\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "但是这个函数有个奇怪的地方\n",
    "\n",
    "如果我们把上面的两行代码另外封装起来，取名叫 sleep3s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "void sleep3s(){\n",
    "    Thread.sleep(3000);\n",
    "    System.out.println(\"Sleep completed\");\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "那么必定会触发安全机制——Java 中的“异常”\n",
    "\n",
    "因为如果 A 程序运行了 B 程序，但是 B 程序陷入休眠而 A 不知道，那么很容易出错。\n",
    "\n",
    "因此，我们必须在需要睡眠的程序里添加声明"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "void sleep3s() throws InterruptedException {\n",
    "    Thread.sleep(3000);\n",
    "    System.out.println(\"Sleep completed\");\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "按照 Java 中的规定，这个异常必须被“抛出“（throws，就是告诉上一级）或者直接被处理掉。\n",
    "\n",
    "现在再看看？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sleep3s()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "// end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Java",
   "language": "java",
   "name": "java"
  },
  "language_info": {
   "codemirror_mode": "java",
   "file_extension": ".java",
   "mimetype": "text/x-java-source",
   "name": "Java",
   "pygments_lexer": "java",
   "version": "10.0.1+10-Debian-4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
